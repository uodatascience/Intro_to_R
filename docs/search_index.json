[
["functions-1.html", "7 Functions", " 7 Functions Stolen without changes from Kristaâ€™s lesson. A stub, a work-in-progress. # General form function_name &lt;- function(var){ Do something return(new_variable) } Functions have: A name Inputs, or arguments, within the function A body. This is the code between { } inverse &lt;- function(x){ inverse &lt;- 1/x return(inverse) } inverse(2) ## [1] 0.5 Another example of a function # get data from each subject&#39;s directory and make a data frame for each subject create_df &lt;- function(subjects) { df &lt;- data.frame() # make an empty data frame for (sub in subjects) { data_file = list.files(paste0(data_dir, sub), pattern = &quot;*.csv&quot;) # list of csv files in the subject&#39;s datadir path_tmp &lt;- paste0(data_dir, sub, &quot;/&quot;, data_file) # path to subject&#39;s data file df_tmp &lt;- read.csv(path_tmp, sep = &quot;,&quot;) # read in the data df_tmp$id &lt;- rep(as.character(sub), nrow(df_tmp)) # make a column for the subject ID based df &lt;- rbind(df, df_tmp) # add the subject&#39;s data to the main data frame } return(df) # name the data frame &#39;dat&#39; and make available in the global environment } Use the function # dat &lt;- create_df(subjects = subjects) # head(dat) Scoping from R Faq 3.3.1 NOT REAL YET! # S4 Methods are stored in environments nM &lt;- asNamespace(&quot;Matrix&quot;) sort(grep(&quot;^[.]__T__&quot;, names(nM), value=TRUE)) ## [1] &quot;.__T__-:base&quot; &quot;.__T__!:base&quot; ## [3] &quot;.__T__[:base&quot; &quot;.__T__[&lt;-:base&quot; ## [5] &quot;.__T__*:base&quot; &quot;.__T__/:base&quot; ## [7] &quot;.__T__&amp;:base&quot; &quot;.__T__%*%:base&quot; ## [9] &quot;.__T__%/%:base&quot; &quot;.__T__%&amp;%:Matrix&quot; ## [11] &quot;.__T__%%:base&quot; &quot;.__T__^:base&quot; ## [13] &quot;.__T__+:base&quot; &quot;.__T__all:base&quot; ## [15] &quot;.__T__all.equal:base&quot; &quot;.__T__any:base&quot; ## [17] &quot;.__T__anyNA:base&quot; &quot;.__T__Arith:base&quot; ## [19] &quot;.__T__as.array:base&quot; &quot;.__T__as.integer:base&quot; ## [21] &quot;.__T__as.logical:base&quot; &quot;.__T__as.matrix:base&quot; ## [23] &quot;.__T__as.numeric:base&quot; &quot;.__T__as.vector:base&quot; ## [25] &quot;.__T__band:Matrix&quot; &quot;.__T__BunchKaufman:Matrix&quot; ## [27] &quot;.__T__cbind2:methods&quot; &quot;.__T__chol:base&quot; ## [29] &quot;.__T__chol2inv:base&quot; &quot;.__T__Cholesky:Matrix&quot; ## [31] &quot;.__T__coerce:methods&quot; &quot;.__T__coerce&lt;-:methods&quot; ## [33] &quot;.__T__colMeans:base&quot; &quot;.__T__colSums:base&quot; ## [35] &quot;.__T__Compare:methods&quot; &quot;.__T__cov2cor:stats&quot; ## [37] &quot;.__T__crossprod:base&quot; &quot;.__T__determinant:base&quot; ## [39] &quot;.__T__diag:base&quot; &quot;.__T__diag&lt;-:base&quot; ## [41] &quot;.__T__diff:base&quot; &quot;.__T__dim:base&quot; ## [43] &quot;.__T__dim&lt;-:base&quot; &quot;.__T__dimnames:base&quot; ## [45] &quot;.__T__dimnames&lt;-:base&quot; &quot;.__T__drop:base&quot; ## [47] &quot;.__T__expand:Matrix&quot; &quot;.__T__expm:Matrix&quot; ## [49] &quot;.__T__facmul:Matrix&quot; &quot;.__T__forceSymmetric:Matrix&quot; ## [51] &quot;.__T__format:base&quot; &quot;.__T__head:utils&quot; ## [53] &quot;.__T__image:graphics&quot; &quot;.__T__initialize:methods&quot; ## [55] &quot;.__T__is.finite:base&quot; &quot;.__T__is.infinite:base&quot; ## [57] &quot;.__T__is.na:base&quot; &quot;.__T__isDiagonal:Matrix&quot; ## [59] &quot;.__T__isSymmetric:base&quot; &quot;.__T__isTriangular:Matrix&quot; ## [61] &quot;.__T__kronecker:base&quot; &quot;.__T__length:base&quot; ## [63] &quot;.__T__Logic:base&quot; &quot;.__T__lu:Matrix&quot; ## [65] &quot;.__T__Math:base&quot; &quot;.__T__Math2:methods&quot; ## [67] &quot;.__T__mean:base&quot; &quot;.__T__nnzero:Matrix&quot; ## [69] &quot;.__T__norm:base&quot; &quot;.__T__Ops:base&quot; ## [71] &quot;.__T__pack:Matrix&quot; &quot;.__T__print:base&quot; ## [73] &quot;.__T__prod:base&quot; &quot;.__T__qr:base&quot; ## [75] &quot;.__T__qr.coef:base&quot; &quot;.__T__qr.fitted:base&quot; ## [77] &quot;.__T__qr.Q:base&quot; &quot;.__T__qr.qty:base&quot; ## [79] &quot;.__T__qr.qy:base&quot; &quot;.__T__qr.R:base&quot; ## [81] &quot;.__T__qr.resid:base&quot; &quot;.__T__rbind2:methods&quot; ## [83] &quot;.__T__rcond:base&quot; &quot;.__T__rep:base&quot; ## [85] &quot;.__T__rowMeans:base&quot; &quot;.__T__rowSums:base&quot; ## [87] &quot;.__T__Schur:Matrix&quot; &quot;.__T__show:methods&quot; ## [89] &quot;.__T__skewpart:Matrix&quot; &quot;.__T__solve:base&quot; ## [91] &quot;.__T__sum:base&quot; &quot;.__T__summary:base&quot; ## [93] &quot;.__T__Summary:base&quot; &quot;.__T__symmpart:Matrix&quot; ## [95] &quot;.__T__t:base&quot; &quot;.__T__tail:utils&quot; ## [97] &quot;.__T__tcrossprod:base&quot; &quot;.__T__toeplitz:stats&quot; ## [99] &quot;.__T__tril:Matrix&quot; &quot;.__T__triu:Matrix&quot; ## [101] &quot;.__T__unname:base&quot; &quot;.__T__unpack:Matrix&quot; ## [103] &quot;.__T__update:stats&quot; &quot;.__T__updown:Matrix&quot; ## [105] &quot;.__T__which:base&quot; &quot;.__T__writeMM:Matrix&quot; ## [107] &quot;.__T__zapsmall:base&quot; meth.Ops &lt;- nM$`.__T__Ops:base` head(sort(names(meth.Ops))) ## [1] &quot;abIndex#abIndex&quot; &quot;abIndex#ANY&quot; &quot;ANY#abIndex&quot; &quot;ANY#ddiMatrix&quot; ## [5] &quot;ANY#ldiMatrix&quot; &quot;ANY#Matrix&quot; "]
]
